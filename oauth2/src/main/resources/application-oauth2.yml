spring:
  profiles:
    include: kakao#, naver, google
 
#---
#spring:
#  profiles: naver
#  security:
#    oauth2:
#      client:
#        registration:
#          naver:
#            clientId: {클라이언트 아이디}
#            client-secret: {클라이언트 비밀번호}
#            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
#            authorization-grant-type: authorization_code
#            scope:
#              - name
#              - email
#              - profile_image
#            client-name: Naver
# 
# 
#        provider:
#          naver:
#            authorization_uri: https://nid.naver.com/oauth2.0/authorize # api 문서 참고
#            token_uri: https://nid.naver.com/oauth2.0/token # api 문서 참고
#            user-info-uri: https://openapi.naver.com/v1/nid/me # api 문서 참고
#            user_name_attribute: response # api 문서 참고
#---
spring:
  profiles: kakao
  security:
    oauth2:
      client:
        registration:
          kakao:
            clientId: {클라이언트 아이디}
            client-secret: {클라이언트 비밀번호}
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - profile_image
              - account_email
            client-authentication-method: POST
            client-name: kakao
 
        provider:
          kakao:
            authorization_uri: https://kauth.kakao.com/oauth/authorize # api 문서 참고
            token_uri: https://kauth.kakao.com/oauth/token # api 문서 참고
            user-info-uri: https://kapi.kakao.com/v2/user/me # api 문서 참고
            user_name_attribute: id # api 문서 참고
#---
#spring:
#  profiles: google
#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            clientId: {클라이언트 아이디}
#            clientSecret: {클라이언트 비밀번호}
#            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - email
#              - profile
#          # google, github, facebook 은 기본적으로 provider 를 제공한다
#---
#spring:
#  profiles: github
#  security:
#    oauth2:
#      client:
#        registration:
#          github:
#            clientId: {클라이언트 아이디}
#            clientSecret: {클라이언트 비밀번호}
#            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - user:email
#              - read:user
#          # google, github 는 기본적으로 provider 를 제공한다
#---
#spring:
#  profiles: facebook
#  security:
#    oauth2:
#      client:
#        registration:
#          facebook:
#            clientId: {클라이언트 아이디}
#            clientSecret: {클라이언트 비밀번호}
#            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - email
#              - public_profile
#        provider:
#          facebook:
#            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
#            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
#            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
